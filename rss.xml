<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Writing]]></title><description><![CDATA[Thoughts on Design, Minimalism, and the Web]]></description><link>http://jxnblk.com/writing</link><image><url>http://jxnblk.com/avatar/avatar-640.png</url><title>Writing</title><link>http://jxnblk.com/writing</link></image><generator>RSS for Node</generator><lastBuildDate>Wed, 19 Oct 2016 11:23:26 GMT</lastBuildDate><item><title><![CDATA[Negative space in react]]></title><description><![CDATA[White space is to be regarded as an active element, not a passive background.]]></description><link>http://jxnblk.com/writing/negative-space-in-react</link><guid isPermaLink="false">negative-space-in-react</guid><category><![CDATA[react]]></category><category><![CDATA[design]]></category><category><![CDATA[style]]></category><category><![CDATA[css]]></category><category><![CDATA[margin]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Tue, 23 Aug 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Patterns for Style Composition in React]]></title><description><![CDATA[While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.]]></description><link>http://jxnblk.com/writing/patterns-for-style-composition-in-react</link><guid isPermaLink="false">patterns-for-style-composition-in-react</guid><category><![CDATA[css]]></category><category><![CDATA[css-in-js]]></category><category><![CDATA[design systems]]></category><category><![CDATA[style guides]]></category><category><![CDATA[react]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Sat, 13 Aug 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Universal UI Components]]></title><description><![CDATA[For a while now, I’ve been interested in the idea of creating portable,
interoperable functional UI components that can work in any DOM rendering library,
whether it’s
React,
Preact,
hyperscript,
bel,
yo-yo,
or some other library.]]></description><link>http://jxnblk.com/writing/universal-ui-components</link><guid isPermaLink="false">universal-ui-components</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 06 Jul 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Domain-Specific Design Languages]]></title><description><![CDATA[definition of DSL]]></description><link>http://jxnblk.com/writing/domain-specific-design-languages</link><guid isPermaLink="false">domain-specific-design-languages</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Thu, 30 Jun 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Unit testing UI]]></title><description><![CDATA[I recently read
this excellent article,
where the design team at Vox has devised a testing framework for new UI components introduced into their pattern library.
While the methods they suggest are excellent, and what I’d consider something that should be industry-standard in our field,
it got me thinking that this concept could be taken a step further.
What if designers wrote actual unit tests for UI components?
What if those tests were actually applied in user acceptance testing, A/B tests, and tested against performance metrics?]]></description><link>http://jxnblk.com/writing/unit-testing-ui</link><guid isPermaLink="false">unit-testing-ui</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Mon, 20 Jun 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Components]]></title><description><![CDATA[Everything in a UI is a component.
This includes buttons, inputs, forms, promotional modules, pages, user flows, etc.
I use the word component not only because this is how the underlying code is written in libraries like React and Ember,
but also because pieces of a well-designed UI system should be composable.]]></description><link>http://jxnblk.com/writing/components</link><guid isPermaLink="false">components</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Fri, 17 Jun 2016 04:00:00 GMT</pubDate></item><item><title><![CDATA[Zero-Configuration React Static Site Generator]]></title><description><![CDATA[React is a great way to generate static HTML with a component-based UI.
One of the biggest hurdles to working with React is the amount of boilerplate and build configuration it takes to get going.
I wanted to make it dead-simple to start building static pages with React
and without the need to install tons of npm modules and configure webpack.]]></description><link>http://jxnblk.com/writing/zero-configuration-react-static-site-generator</link><guid isPermaLink="false">zero-configuration-react-static-site-generator</guid><category><![CDATA[react]]></category><category><![CDATA[static-site-generator]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Mon, 15 Feb 2016 05:00:00 GMT</pubDate></item><item><title><![CDATA[Mathematical Web Typography]]></title><description><![CDATA[When it comes to designing for the Web
I like to follow a handful of general principles.
First, design for the medium, or as Frank Chimero puts it,
follow “the grain of the Web”.
The Web is fluid - based on screens and devices of varying sizes –
and typography on the Web should reflect that.
Second, design content-out,
which usually means designing around a strong typographical base since the large majority of Web content and UI is text.
And last, design with modular scales.
Things built on the Web should be fluid and infinitely scalable.
Using modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.]]></description><link>http://jxnblk.com/writing/mathematical-web-typography</link><guid isPermaLink="false">mathematical-web-typography</guid><category><![CDATA[css]]></category><category><![CDATA[typography]]></category><category><![CDATA[math]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Tue, 23 Jun 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[Mini MacBook Review]]></title><description><![CDATA[Why the new MacBook might just be my favorite computer ever]]></description><link>http://jxnblk.com/writing/mini-macbook-review</link><guid isPermaLink="false">mini-macbook-review</guid><category><![CDATA[apple]]></category><category><![CDATA[macbook]]></category><category><![CDATA[review]]></category><category><![CDATA[laptop]]></category><category><![CDATA[tech]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 17 Jun 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[Color Palette Documentation for Living Style Guides]]></title><description><![CDATA[Virtually every style guide has a color palette section in its documentation.
Many times I’ve seen this documentation created manually, where every change to a color requires updating the values in two places – the stylesheet and the style guide.
This often leads to one falling out of sync with the other,
and makes maintaining a living style guide more difficult.]]></description><link>http://jxnblk.com/writing/color-palette-documentation-for-living-style-guides</link><guid isPermaLink="false">color-palette-documentation-for-living-style-guides</guid><category><![CDATA[css]]></category><category><![CDATA[color]]></category><category><![CDATA[documentation]]></category><category><![CDATA[style guide]]></category><category><![CDATA[living style guide]]></category><category><![CDATA[color contrast]]></category><category><![CDATA[accessibility]]></category><category><![CDATA[a11y]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Mon, 15 Jun 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[How react-geomicons Works]]></title><description><![CDATA[Geomicons Open is an SVG icon set completely hand-coded using the Path element.
The first version’s source was built in complete SVG, but I soon realized that the wrapping SVG and Path elements were the exact same for each icon.
In an effort to DRY things up, I set up a rudimentary build process that would take source code containing only the Path elements’ d attribute value and create valid SVG code.]]></description><link>http://jxnblk.com/writing/how-react-geomicons-works</link><guid isPermaLink="false">how-react-geomicons-works</guid><category><![CDATA[react]]></category><category><![CDATA[svg]]></category><category><![CDATA[icons]]></category><category><![CDATA[geomicons]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 10 Jun 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[Static Site Generation with React and Webpack]]></title><description><![CDATA[I’ve been dabbling with React for a few months now and using it in several small open source projects
to better understand the technology.
React’s focus on reusablility, along with the ability to install and require components via npm,
provides an elegant way to rapidly build application UI in an efficient and consistent way.
It’s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.]]></description><link>http://jxnblk.com/writing/static-site-generation-with-react-and-webpack</link><guid isPermaLink="false">static-site-generation-with-react-and-webpack</guid><category><![CDATA[react]]></category><category><![CDATA[webpack]]></category><category><![CDATA[static-site]]></category><category><![CDATA[tutorial]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Sat, 06 Jun 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[Rethinking Variables in CSS]]></title><description><![CDATA[CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning stylesheets with the same values being used over and over and losing sync, CSS preprocessors introduced variables to help keep values defined in a single place. Soon custom properties will be part of the CSS specification, which promises a native, more robust approach than what preprocessors can do.]]></description><link>http://jxnblk.com/writing/rethinking-variables-in-css</link><guid isPermaLink="false">rethinking-variables-in-css</guid><category><![CDATA[css]]></category><category><![CDATA[variables]]></category><category><![CDATA[preprocessors]]></category><category><![CDATA[postprocessors]]></category><category><![CDATA[postcss]]></category><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Fri, 08 May 2015 04:00:00 GMT</pubDate></item><item><title><![CDATA[5 ways to not shoot yourself in the foot with CSS]]></title><link>http://jxnblk.com/writing/5-ways-to-not-shoot-yourself-in-the-foot-with-css</link><guid isPermaLink="false">5-ways-to-not-shoot-yourself-in-the-foot-with-css</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Tue, 30 Dec 2014 05:00:00 GMT</pubDate></item><item><title><![CDATA[It’s Okay to Look the Same]]></title><description><![CDATA[Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of the attack. This visual sameness isn’t necessarily a bad thing.]]></description><link>http://jxnblk.com/writing/its-okay-to-look-the-same</link><guid isPermaLink="false">its-okay-to-look-the-same</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Fri, 25 Apr 2014 04:00:00 GMT</pubDate></item><item><title><![CDATA[I don’t know how to design]]></title><description><![CDATA[I’ll admit it.]]></description><link>http://jxnblk.com/writing/i-dont-know-how-to-design</link><guid isPermaLink="false">i-dont-know-how-to-design</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 16 Apr 2014 04:00:00 GMT</pubDate></item><item><title><![CDATA[Designing in the Browser Faster]]></title><description><![CDATA[I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And, while I’ve been fascinated with the idea of designing in the browser for a long time, it wasn’t until recently that it’s become much, much faster for me than using traditional design software.]]></description><link>http://jxnblk.com/writing/designing-in-the-browser-faster</link><guid isPermaLink="false">designing-in-the-browser-faster</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Mon, 14 Apr 2014 04:00:00 GMT</pubDate></item><item><title><![CDATA[An Update on the Hamburger Menu]]></title><description><![CDATA[About a year ago, I wrote Hamburgers & Basements: Why Not to Use Left Nav Flyouts.]]></description><link>http://jxnblk.com/writing/an-update-on-the-hamburger-menu</link><guid isPermaLink="false">an-update-on-the-hamburger-menu</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Sat, 12 Apr 2014 04:00:00 GMT</pubDate></item><item><title><![CDATA[I’m Sick of Your Tiny, Tiny Type]]></title><description><![CDATA[Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget my magnifying glass. I tap the Safari Reader button, but that’s not a solution to the problem. That’s a band-aid for your bad typesetting.]]></description><link>http://jxnblk.com/writing/im-sick-of-your-tiny-tiny-type</link><guid isPermaLink="false">im-sick-of-your-tiny-tiny-type</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Tue, 29 Jan 2013 05:00:00 GMT</pubDate></item><item><title><![CDATA[Organizing Mobile Navigation Based on Information-Seeking Behavior]]></title><description><![CDATA[When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go. Applications that obscure navigation with the intent of focusing on content can make finding specific information difficult. On the other hand, skewing towards too much navigation can overwhelm the user. Mobile apps should balance navigation for users with different information needs.]]></description><link>http://jxnblk.com/writing/organizing-mobile-navigation-based-on-information-seeking-behavior</link><guid isPermaLink="false">organizing-mobile-navigation-based-on-information-seeking-behavior</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 16 Jan 2013 05:00:00 GMT</pubDate></item><item><title><![CDATA[Buckets and Jumpoffs: Using Content-Centric Contextual Navigation]]></title><description><![CDATA[While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals first and navigation second. Don't overload the user with navigation choices, show meaningful content instead. Even though tab bars are great – sitting below the content, out of the way until the user needs them – there are new opportunities to explore content-centric contextual navigation when designing for mobile.]]></description><link>http://jxnblk.com/writing/buckets-and-jumpoffs-using-content-centric-contextual-navigation</link><guid isPermaLink="false">buckets-and-jumpoffs-using-content-centric-contextual-navigation</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Fri, 07 Dec 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[The Advantages of Table Views Over Left Nav Flyouts]]></title><link>http://jxnblk.com/writing/the-advantages-of-table-views-over-left-nav-flyouts</link><guid isPermaLink="false">the-advantages-of-table-views-over-left-nav-flyouts</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Sat, 01 Dec 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Hamburgers & Basements: Why Not to Use Left Nav Flyouts]]></title><description><![CDATA["Good design makes a product understandable" – Dieter Rams]]></description><link>http://jxnblk.com/writing/hamburgers-and-basements-why-not-to-use-left-nav-flyouts</link><guid isPermaLink="false">hamburgers-and-basements-why-not-to-use-left-nav-flyouts</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 21 Nov 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Microbeats is the Best Journal I’ve Ever Kept]]></title><description><![CDATA[I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC from Shanghai, where I played a lot of live sets and DJ gigs, I realized there wasn’t much of a music scene in DC, and I stopped playing out. After a few years, I noticed that I generally wasn’t being inspired, and I wasn’t growing much as an artist. I also noticed that I had a tendency to never finish the tracks that I’d started. I was pretty good at creating catchy little loops, but they never evolved into anything beyond that.]]></description><link>http://jxnblk.com/writing/microbeats-is-the-best-journal-ive-ever-kept</link><guid isPermaLink="false">microbeats-is-the-best-journal-ive-ever-kept</guid><dc:creator><![CDATA[Brent Jackson]]></dc:creator><pubDate>Wed, 07 Nov 2012 05:00:00 GMT</pubDate></item></channel></rss>